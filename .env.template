# Environment Variables Template for Apache Kafka Consumer with SSL/ACLs
# Copy this file to .env and fill in the actual values

# ==================================================
# KAFKA CONFIGURATION
# ==================================================

# Kafka Brokers (comma-separated list)
KAFKA_BOOTSTRAP_SERVERS=kafka-broker1.example.com:9093,kafka-broker2.example.com:9093,kafka-broker3.example.com:9093

# Consumer Group ID
KAFKA_GROUP_ID=camel-kafka-consumer-group-prod

# Topics to consume from (comma-separated list)
KAFKA_TOPICS=ecs.AccessLogJsonV1,logs.application,events.user,metrics.system,alerts.critical

# ==================================================
# SECURITY CONFIGURATION
# ==================================================

# Security Protocol (SASL_SSL for production, SASL_PLAINTEXT for dev)
KAFKA_SECURITY_PROTOCOL=SASL_SSL

# SASL Mechanism (SCRAM-SHA-256, SCRAM-SHA-512, or PLAIN)
KAFKA_SASL_MECHANISM=SCRAM-SHA-256

# SASL Credentials
KAFKA_CONSUMER_USERNAME=kafka-consumer-user
KAFKA_CONSUMER_PASSWORD=your-secure-password-here

# ==================================================
# SSL KEYSTORE CONFIGURATION
# ==================================================

# Truststore Configuration
KAFKA_SSL_TRUSTSTORE_LOCATION=/opt/kafka/config/ssl/kafka.client.truststore.jks
KAFKA_TRUSTSTORE_PASSWORD=your-truststore-password-here
KAFKA_SSL_TRUSTSTORE_TYPE=JKS

# Keystore Configuration
KAFKA_SSL_KEYSTORE_LOCATION=/opt/kafka/config/ssl/kafka.client.keystore.jks
KAFKA_KEYSTORE_PASSWORD=your-keystore-password-here
KAFKA_SSL_KEYSTORE_TYPE=JKS

# Key Password
KAFKA_KEY_PASSWORD=your-key-password-here

# SSL Endpoint Identification
KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=https

# ==================================================
# CONSUMER CONFIGURATION
# ==================================================

# Offset Reset Strategy (earliest, latest, none)
KAFKA_AUTO_OFFSET_RESET=earliest

# Auto Commit (false for manual commits)
KAFKA_ENABLE_AUTO_COMMIT=false

# Session Timeout (milliseconds)
KAFKA_SESSION_TIMEOUT_MS=45000

# Max Poll Records
KAFKA_MAX_POLL_RECORDS=10

# Max Poll Interval (milliseconds)
KAFKA_MAX_POLL_INTERVAL_MS=300000

# Client ID
KAFKA_CLIENT_ID=camel-kafka-consumer-prod-client

# Request Timeout (milliseconds)
KAFKA_REQUEST_TIMEOUT_MS=60000

# ==================================================
# APPLICATION CONFIGURATION
# ==================================================

# Spring Application Name
SPRING_APPLICATION_NAME=camel-kafka-consumer

# Server Port
SERVER_PORT=8086

# Spring Profile (apache-kafka-env, apache-kafka-ssl, confluent, etc.)
SPRING_PROFILES_ACTIVE=apache-kafka-env

# ==================================================
# LOGGING CONFIGURATION
# ==================================================

# Log Levels
LOG_LEVEL_ROOT=INFO
LOG_LEVEL_CAMEL=INFO
LOG_LEVEL_KAFKA=WARN

# Log File Path
LOG_FILE_PATH=/var/log/camel-kafka-consumer/application.log

# ==================================================
# MONITORING CONFIGURATION
# ==================================================

# Management Endpoints
MANAGEMENT_ENDPOINTS=health,info,metrics

# Health Details
MANAGEMENT_HEALTH_DETAILS=when-authorized

# Prometheus Metrics
PROMETHEUS_ENABLED=true

# ==================================================
# OPTIONAL: SCHEMA REGISTRY CONFIGURATION
# ==================================================

# Schema Registry URL (if using Avro/Schema Registry)
# KAFKA_SCHEMA_REGISTRY_URL=https://schema-registry.example.com

# Schema Registry Authentication (if required)
# KAFKA_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO=username:password

# ==================================================
# DOCKER SPECIFIC CONFIGURATION
# ==================================================

# Docker log configuration
DOCKER_LOG_MAX_SIZE=10m
DOCKER_LOG_MAX_FILE=3

# Container timezone
TZ=UTC

# ==================================================
# SECURITY NOTES
# ==================================================
# 1. Never commit this file with actual passwords to version control
# 2. Use a secrets management system in production (e.g., HashiCorp Vault, AWS Secrets Manager)
# 3. Rotate passwords regularly
# 4. Use strong, unique passwords for each environment
# 5. Limit keystore file permissions (chmod 600)
# 6. Store keystores in secure, encrypted storage
