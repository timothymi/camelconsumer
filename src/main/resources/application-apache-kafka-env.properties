# Environment Variable Configuration Example for Production
# This file shows how to use environment variables for sensitive configuration

# ==================================================
# PRODUCTION CONFIGURATION with Environment Variables
# ==================================================

# Kafka Broker Configuration
kafka.bootstrapServers=${KAFKA_BOOTSTRAP_SERVERS:kafka-broker1.example.com:9093,kafka-broker2.example.com:9093,kafka-broker3.example.com:9093}
kafka.groupId=${KAFKA_GROUP_ID:camel-kafka-consumer-group-prod}
kafka.topics=${KAFKA_TOPICS:ecs.AccessLogJsonV1,logs.application,events.user,metrics.system,alerts.critical}

# Security Protocol and SASL Configuration
kafka.securityProtocol=${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
kafka.saslMechanism=${KAFKA_SASL_MECHANISM:SCRAM-SHA-256}
kafka.saslJaasConfig=${KAFKA_SASL_JAAS_CONFIG:org.apache.kafka.common.security.scram.ScramLoginModule required username='kafka-consumer-user' password='CHANGE_ME';}

# SSL Configuration with Java Keystores
kafka.sslTruststoreLocation=${KAFKA_SSL_TRUSTSTORE_LOCATION:/opt/kafka/config/ssl/kafka.client.truststore.jks}
kafka.sslTruststorePassword=${KAFKA_SSL_TRUSTSTORE_PASSWORD}
kafka.sslTruststoreType=${KAFKA_SSL_TRUSTSTORE_TYPE:JKS}
kafka.sslKeystoreLocation=${KAFKA_SSL_KEYSTORE_LOCATION:/opt/kafka/config/ssl/kafka.client.keystore.jks}
kafka.sslKeystorePassword=${KAFKA_SSL_KEYSTORE_PASSWORD}
kafka.sslKeystoreType=${KAFKA_SSL_KEYSTORE_TYPE:JKS}
kafka.sslKeyPassword=${KAFKA_SSL_KEY_PASSWORD}
kafka.sslEndpointIdentificationAlgorithm=${KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:https}

# Consumer Configuration
kafka.autoOffsetReset=${KAFKA_AUTO_OFFSET_RESET:earliest}
kafka.enableAutoCommit=${KAFKA_ENABLE_AUTO_COMMIT:false}
kafka.sessionTimeoutMs=${KAFKA_SESSION_TIMEOUT_MS:45000}
kafka.maxPollRecords=${KAFKA_MAX_POLL_RECORDS:10}
kafka.maxPollIntervalMs=${KAFKA_MAX_POLL_INTERVAL_MS:300000}
kafka.keyDeserializer=${KAFKA_KEY_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
kafka.valueDeserializer=${KAFKA_VALUE_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
kafka.clientId=${KAFKA_CLIENT_ID:camel-kafka-consumer-prod-client}
kafka.requestTimeoutMs=${KAFKA_REQUEST_TIMEOUT_MS:60000}

# Spring Boot Configuration
spring.application.name=${SPRING_APPLICATION_NAME:camel-kafka-consumer}
server.port=${SERVER_PORT:8086}

# Apache Camel Configuration
camel.springboot.name=${CAMEL_SPRINGBOOT_NAME:camel-kafka-consumer-ssl}
camel.springboot.main-run-controller=true
camel.springboot.use-mdc-logging=true

# Logging Configuration
logging.level.com.dhi.camelkafka=${LOG_LEVEL_ROOT:INFO}
logging.level.org.apache.camel=${LOG_LEVEL_CAMEL:INFO}
logging.level.org.apache.kafka=${LOG_LEVEL_KAFKA:WARN}
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.file.name=${LOG_FILE_PATH:logs/camel-kafka-consumer.log}

# Health and Monitoring
management.endpoints.web.exposure.include=${MANAGEMENT_ENDPOINTS:health,info,metrics}
management.endpoint.health.show-details=${MANAGEMENT_HEALTH_DETAILS:when-authorized}
management.metrics.export.prometheus.enabled=${PROMETHEUS_ENABLED:true}
