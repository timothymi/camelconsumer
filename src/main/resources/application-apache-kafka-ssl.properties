# Apache Kafka with ACLs and SSL Java Keystores - Production Configuration

# ==================================================
# PRODUCTION CONFIGURATION - SASL/SSL with Java Keystores
# ==================================================

# Kafka Broker Configuration
kafka.bootstrapServers=kafka-broker1.example.com:9093,kafka-broker2.example.com:9093,kafka-broker3.example.com:9093
kafka.groupId=camel-kafka-consumer-group-prod
kafka.topics=ecs.AccessLogJsonV1,logs.application,events.user,metrics.system,alerts.critical

# Security Protocol and SASL Configuration
kafka.securityProtocol=SASL_SSL
kafka.saslMechanism=SCRAM-SHA-256
kafka.saslJaasConfig=org.apache.kafka.common.security.scram.ScramLoginModule required username='kafka-consumer-user' password='your-secure-password-here';

# SSL Configuration with Java Keystores
kafka.sslTruststoreLocation=/opt/kafka/config/ssl/kafka.client.truststore.jks
kafka.sslTruststorePassword=your-truststore-password-here
kafka.sslTruststoreType=JKS
kafka.sslKeystoreLocation=/opt/kafka/config/ssl/kafka.client.keystore.jks
kafka.sslKeystorePassword=your-keystore-password-here
kafka.sslKeystoreType=JKS
kafka.sslKeyPassword=your-key-password-here
kafka.sslEndpointIdentificationAlgorithm=https

# Consumer Configuration
kafka.autoOffsetReset=earliest
kafka.enableAutoCommit=false
kafka.sessionTimeoutMs=45000
kafka.maxPollRecords=10
kafka.maxPollIntervalMs=300000
kafka.keyDeserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.valueDeserializer=org.apache.kafka.common.serialization.StringDeserializer
kafka.clientId=camel-kafka-consumer-prod-client
kafka.requestTimeoutMs=60000

# ==================================================
# DEVELOPMENT CONFIGURATION - SASL/PLAINTEXT (Local Testing)
# ==================================================

# Uncomment these for local development with SASL but no SSL
# kafka.bootstrapServers=localhost:9092
# kafka.groupId=camel-kafka-consumer-group-dev
# kafka.topics=test.topic1,test.topic2,test.topic3
# kafka.securityProtocol=SASL_PLAINTEXT
# kafka.saslMechanism=SCRAM-SHA-256
# kafka.saslJaasConfig=org.apache.kafka.common.security.scram.ScramLoginModule required username='test-user' password='test-password';

# ==================================================
# ALTERNATIVE: Individual Topic Configuration
# ==================================================
# Instead of kafka.topics, you can configure individual topics:
# kafka.topic1=ecs.AccessLogJsonV1
# kafka.topic2=logs.application
# kafka.topic3=events.user
# kafka.topic4=metrics.system
# kafka.topic5=alerts.critical

# ==================================================
# Spring Boot Configuration
# ==================================================
spring.application.name=camel-kafka-consumer
server.port=8086

# Active profile (use 'prod' for production with SSL)
spring.profiles.active=apache-kafka-ssl

# ==================================================
# Apache Camel Configuration
# ==================================================
camel.springboot.name=camel-kafka-consumer-ssl
camel.springboot.main-run-controller=true
camel.springboot.use-mdc-logging=true

# ==================================================
# Logging Configuration
# ==================================================
logging.level.com.dhi.camelkafka=INFO
logging.level.org.apache.camel=INFO
logging.level.org.apache.kafka=WARN
logging.level.org.springframework.kafka=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.file.name=logs/camel-kafka-consumer.log

# ==================================================
# Health and Monitoring
# ==================================================
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.metrics.export.prometheus.enabled=true

# ==================================================
# Configuration Notes
# ==================================================
# 1. Replace all placeholder passwords with actual secure passwords
# 2. Update keystore/truststore file paths to match your deployment
# 3. Ensure the kafka-consumer-user has appropriate ACL permissions
# 4. Configure your Kafka brokers with matching SSL and SASL settings
# 5. Use environment variables or external configuration for sensitive data
